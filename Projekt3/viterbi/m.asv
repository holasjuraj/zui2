% Viterbi algorithm
%   Computes the most probable sequence of hidden states given the sequence
%   of sequence of values for visible states.

clear all;

%% Data
states = {'Healthy', 'Fever'};
observations = {'normal', 'cold', 'dizzy'};

% T(N,N)=transition probability matrix
T = [[0.8, 0.2];
     [0.3, 0.7]];
% E(N,M)=Emission matrix
E = [[0.6, 0.3, 0.1];
     [0.1, 0.2, 0.7]];
% pi=initial probability matrix
pi = [0.6, 0.4];

% O=Given observation sequence labelled in numerics
% 1 = 1st observation type, 2 = 2nd observation type,..
o = [1, 2, 2, 3, 1, 1];
%o = [3, 3, 1, 3, 3, 2, 2];

n_states = length(T(1,:));
n_observations = numel(o);

%% Algorithm
A = zeros(n_states, n_observations); % probability of seq. ending in particular state
mx = zeros(1, n_observations); % list of indexes of states with max. prob.

A(:,1) = pi' .* E(:,o(1));
for t=2:n_observations
    for j=1:n_states
        A(j,t) = max( A(:,t-1) .* T(:,j) .* E(j, o(t)) );
    end
    A(:,t) = A(:,t) / sum(A(:,t))
end

mx(t) = (A(:,t) == max(A(:,t))) * (1:n_states);

for t = n_observations:-1:1
    a = zeros(n_states,1);
    for j=1:n_states
        a(j,1) = max( A(:,t-1) .* T(:,j) .* E(j, o(t)) );
    end
    a(:,1) = a(:,1) / sum(a(:,1));
    
    mx(t) = (A(:,t) == a(:,1)) * (1:n_states);
    
end